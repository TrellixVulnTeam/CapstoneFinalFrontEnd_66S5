#!/usr/bin/env node
var path = require('path'),
    Table = require('easy-table'),
    optimist = require('optimist'),
    ProgressBar = require('progress'),
    survey = require('../lib/survey'),
    argv = optimist.usage('Run a series of benchmarks exported from FILENAME.\nUsage:survey [options] FILENAME [...MORE]')
        .options({
            'count': {
                alias: 'c',
                description: 'An approximate number of times to run each test.',
                'default': 1000
            },
            'verbose': {
                alias: 'v',
                description: 'Print each test as its running for debugging.',
                'default': false
            },
            'json': {
                alias: 'j',
                description: 'Output as a JSON Array of result data.',
                'default': false
            },
            'parallel': {
                alias: 'p',
                description: 'Whether or not (and to what extent) to parallelize tests.',
                'default': false
            },
            'help': {
                description: 'Show this help message, then exit.'
            }
        })
        .demand(1)
        .argv;

if (argv.help) {
    optimist.showHelp();
    process.exit();
}

function log(msg) {
    if (argv.json) {
        return;
    }

    console.log(msg);
}

function json(data) {
    if (!argv.json) {
        return;
    }

    if (typeof data === 'object') {
        console.log(JSON.stringify(data));
    } else {
        console.log(data);
    }
}

json('[');

function run() {
    var file = argv._.pop(),
        subject,
        surveyor,
        bar;

    try {
        subject = require(path.resolve(process.cwd(), file));
    } catch (e) {
        console.error('Failed to load:', file, ':', e.stack || e.message);
    }

    log('\nSurveying: ' + file + '\n');

    surveyor = survey
        .run(subject, argv)
        .on('complete', function (data) {
            var table = new Table();

            data = Object.keys(data).map(function (name) {
                return {
                    name: name,
                    count: data[name].count,
                    average: data[name].average
                };
            }).sort(function compare(a, b) {
                return a.average - b.average;
            });

            json(data);

            data.forEach(function (item) {
                table.cell('Name', item.name);
                table.cell('Actual Count', item.count, Table.Number());
                table.cell('Average Duration (Âµs)', item.average, Table.Number(2));
                table.newRow();
            });

            log('\n');
            log(table.toString());

            if (!argv._.length) {
                json(']');
                process.exit();
            }

            json(',');
            run();
        })
        .on('error', function (err) {
            console.error(err.message);
            run();
        });

    if (!argv.verbose && !argv.json) {
        bar = new ProgressBar(' [:bar] :percent :etas', {
            total: surveyor.left,
            width: 30,
            complete: '=',
            incomplete: ' '
        });
    }

    surveyor.on('sample', function (data) {
        if (argv.verbose) {
            log('Survey ' + (surveyor.total - surveyor.left + 1) + ' of ' + surveyor.total + ': "' + data.name + '"');
        } else if (bar) {
            bar.tick();
        }
    });
}
run();
