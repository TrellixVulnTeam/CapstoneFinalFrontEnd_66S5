/*Type definitions for SurveyJS Creator React JavaScript library v1.9.1-beta.1
(c) 2015-2021 Devsoft Baltic OÃœ - http://surveyjs.io/
Github: https://github.com/surveyjs/survey-creator
License: https://surveyjs.io/Licenses#SurveyCreator
*/
// Dependencies for this module:
//   ../../../@survey/creator
//   ../../../survey-core
//   ../../../survey-react-ui
//   ../../../react

export { editorLocalization, editorLocalization as localization, settings, svgBundle, SurveyLogic, SurveyLogicUI, SurveyQuestionEditorDefinition, ISurveyCreatorOptions, IPropertyGridEditor, ToolboxToolViewModel, PropertyGridEditorCollection } from "@survey/creator";
export { StylesManager } from "@survey/creator";
import { Base, Question, SurveyError, SurveyModel, ItemValue, QuestionSelectBase, QuestionRowModel, LocalizableString } from "survey-core";
import { Model, SurveyElementBase } from "survey-react-ui";
import { ICreatorOptions, CreatorBase, ITabbedMenuItem } from "@survey/creator";
import { Base, SurveyModel } from "survey-core";
import { SurveyElementBase } from "survey-react-ui";
import { CreatorBase } from "@survey/creator";
import { RowViewModel } from "@survey/creator";
import { Base, QuestionRowModel } from "survey-core";
import { QuestionAdornerViewModel } from "@survey/creator";
import React from "react";
import { Base, Question } from "survey-core";
import { QuestionImageAdornerViewModel, QuestionAdornerViewModel } from "@survey/creator";
import { SurveyQuestionElementBase } from "survey-react-ui";
import { QuestionLinkValueModel } from "@survey/creator";
import { ISurveyCreator, SurveyQuestionElementBase } from "survey-react-ui";
import { QuestionEmbeddedSurveyModel } from "@survey/creator";
import { QuestionAdornerViewModel, QuestionRatingAdornerViewModel } from "@survey/creator";
import { Base } from "survey-core";
import { Question, SurveyError, SurveyModel } from "survey-core";
import { ISurveyCreator } from "survey-react-ui";
import { ItemValueWrapperViewModel } from "@survey/creator";
import { QuestionSelectBase, Base, ItemValue } from "survey-core";
import { ImageItemValueWrapperViewModel } from "@survey/creator";
import { QuestionSelectBase, Base, ImageItemValue } from "survey-core";
import { QuestionSelectBase, Base } from "survey-core";
import { MatrixCellWrapperViewModel } from "@survey/creator";
import { SurveyResultsModel } from "@survey/creator";
import { CreatorBase, TabDesignerViewModel } from "@survey/creator";
import { EmbedModel } from "@survey/creator";
import { AceJsonEditorModel } from "@survey/creator";
import { TextareaJsonEditorModel } from "@survey/creator";
import { CreatorBase, IQuestionToolboxItem } from "@survey/creator";
import { ToolboxToolViewModel } from "@survey/creator";
import { TabbedMenuContainer } from "@survey/creator";
import { Base, Action } from "survey-core";
import { CreatorBase, Notifier } from "@survey/creator";
import { SurveyModel } from "survey-core";
import { SideBarModel } from "@survey/creator";
import { IPortableDragEvent, IPortableMouseEvent } from "@survey/creator";
import { PropertyGridViewModel } from "@survey/creator";


import "@survey/creator/survey-creator-core.css";

interface ISurveyCreatorComponentProps {
    creator: SurveyCreator;
}
export declare class SurveyCreatorComponent extends SurveyElementBase<ISurveyCreatorComponentProps, any> {
    constructor(props: ISurveyCreatorComponentProps);
    get creator(): CreatorBase<SurveyModel>;
    protected getStateElement(): Base;
    componentDidMount(): void;
    componentWillUnmount(): void;
    renderElement(): JSX.Element;
    renderActiveTab(): JSX.Element;
    renderCreatorTab(tab: ITabbedMenuItem): JSX.Element;
    renderSideBar(): JSX.Element;
}
export declare class DesignTimeSurveyModel extends Model {
    creator: SurveyCreator;
    constructor(creator: SurveyCreator, jsonObj?: any);
    isPopupEditorContent: boolean;
    getElementWrapperComponentName(element: any, reason?: string): string;
    getElementWrapperComponentData(element: any, reason?: string): any;
    getRowWrapperComponentName(row: QuestionRowModel): string;
    getRowWrapperComponentData(row: QuestionRowModel): any;
    getItemValueWrapperComponentName(item: ItemValue, question: QuestionSelectBase): string;
    getItemValueWrapperComponentData(item: ItemValue, question: QuestionSelectBase): any;
    getRendererForString(element: Base, name: string): string;
    getRendererContextForString(element: Base, locStr: LocalizableString): any;
}
export declare class SurveyCreator extends CreatorBase<SurveyModel> {
    constructor(options?: ICreatorOptions, options2?: ICreatorOptions);
    protected createSurveyCore(json: any, reason: string): Model;
    render(target: string | HTMLElement): void;
    createQuestionElement(question: Question): JSX.Element;
    renderError(key: string, error: SurveyError, cssClasses: any): JSX.Element;
    questionTitleLocation(): string;
    questionErrorLocation(): string;
}
export {};

interface ILogoImageComponentProps {
    data: CreatorBase<SurveyModel>;
}
export declare class LogoImageComponent extends SurveyElementBase<ILogoImageComponentProps, any> {
    constructor(props: ILogoImageComponentProps);
    protected getStateElement(): Base;
    componentDidMount(): void;
    render(): JSX.Element;
}
export {};

interface RowWrapperComponentProps {
    element: JSX.Element;
    componentData: any;
    row: QuestionRowModel;
}
export declare class RowWrapper extends SurveyElementBase<RowWrapperComponentProps, any> {
    model: RowViewModel;
    constructor(props: RowWrapperComponentProps);
    protected getStateElement(): Base;
    render(): JSX.Element;
}
export {};

export interface QuestionAdornerComponentProps {
    element: JSX.Element;
    question: Question;
    componentData: any;
}
export declare class QuestionAdornerComponent extends SurveyElementBase<QuestionAdornerComponentProps, any> {
    protected rootRef: React.RefObject<HTMLDivElement>;
    constructor(props: QuestionAdornerComponentProps);
    protected createQuestionViewModel(): QuestionAdornerViewModel;
    get model(): QuestionAdornerViewModel;
    protected getStateElement(): Base;
    protected canRender(): boolean;
    renderElement(): JSX.Element;
    protected renderContent(allowInteractions: boolean): JSX.Element;
    protected renderElementContent(): JSX.Element;
    protected renderContentOnTop(): JSX.Element;
    protected renderDragAria(): JSX.Element;
    renderElementPlaceholder(): JSX.Element;
}

export declare class QuestionDropdownAdornerComponent extends QuestionAdornerComponent {
    renderElementPlaceholder(): JSX.Element;
}

export declare class QuestionImageAdornerComponent extends QuestionAdornerComponent {
    constructor(props: QuestionAdornerComponentProps);
    protected createQuestionViewModel(): QuestionAdornerViewModel;
    get imageModel(): QuestionImageAdornerViewModel;
    componentDidMount(): void;
    protected renderContentOnTop(): JSX.Element;
    renderElementPlaceholder(): JSX.Element;
}

export declare class SurveyQuestionLinkValue extends SurveyQuestionElementBase {
    constructor(props: any);
    protected get question(): QuestionLinkValueModel;
    protected renderClear(): JSX.Element;
    protected renderElement(): JSX.Element;
}

export declare class SurveyElementEmbeddedSurvey extends SurveyQuestionElementBase {
    constructor(props: any);
    protected get embeddedSurvey(): QuestionEmbeddedSurveyModel;
    protected get creator(): ISurveyCreator;
    render(): JSX.Element;
}

export declare class QuestionRatingAdornerComponent extends QuestionAdornerComponent {
    protected createQuestionViewModel(): QuestionAdornerViewModel;
    get ratingModel(): QuestionRatingAdornerViewModel;
    renderElementPlaceholder(): JSX.Element;
}

export declare class QuestionWidgetAdornerComponent extends QuestionAdornerComponent {
    protected createQuestionViewModel(): QuestionAdornerViewModel;
    get widgetModel(): QuestionAdornerViewModel;
    protected renderElementContent(): JSX.Element;
}

export declare class CellQuestionAdornerComponent extends SurveyElementBase<QuestionAdornerComponentProps, any> {
    model: QuestionAdornerViewModel;
    constructor(props: QuestionAdornerComponentProps);
    protected getStateElement(): Base;
    render(): JSX.Element;
}

export declare class CellQuestionDropdownAdornerComponent extends SurveyElementBase<QuestionAdornerComponentProps, any> {
    model: QuestionAdornerViewModel;
    constructor(props: QuestionAdornerComponentProps);
    protected getStateElement(): Base;
    render(): JSX.Element;
}

interface IQuestionEditorContentComponentProps {
    creator: CreatorBase<SurveyModel>;
    survey: SurveyModel;
}
export declare class QuestionEditorContentComponent extends React.Component<IQuestionEditorContentComponentProps, any> implements ISurveyCreator {
    constructor(props: IQuestionEditorContentComponentProps);
    get survey(): SurveyModel;
    createQuestionElement(question: Question): JSX.Element;
    questionTitleLocation(): string;
    questionErrorLocation(): string;
    renderError(key: string, error: SurveyError, cssClasses: any): JSX.Element;
    render(): JSX.Element;
}
export {};

interface ItemValueAdornerComponentProps {
    element: JSX.Element;
    componentData: any;
    question: QuestionSelectBase;
    item: ItemValue;
}
export declare class ItemValueAdornerComponent extends SurveyElementBase<ItemValueAdornerComponentProps, any> {
    model: ItemValueWrapperViewModel;
    constructor(props: ItemValueAdornerComponentProps);
    protected getStateElement(): Base;
    render(): JSX.Element;
}
export {};

interface ImageItemValueAdornerComponentProps {
    element: JSX.Element;
    componentData: any;
    question: QuestionSelectBase;
    item: ImageItemValue;
}
export declare class ImageItemValueAdornerComponent extends SurveyElementBase<ImageItemValueAdornerComponentProps, any> {
    model: ImageItemValueWrapperViewModel;
    constructor(props: ImageItemValueAdornerComponentProps);
    protected getStateElement(): Base;
    componentDidMount(): void;
    preventDragHandler: (e: any) => void;
    render(): JSX.Element;
}
export {};

interface MatrixCellAdornerComponentProps {
    element: JSX.Element;
    componentData: any;
    question: QuestionSelectBase;
    cell: any;
}
export declare class MatrixCellAdornerComponent extends SurveyElementBase<MatrixCellAdornerComponentProps, any> {
    model: MatrixCellWrapperViewModel;
    constructor(props: MatrixCellAdornerComponentProps);
    protected getStateElement(): Base;
    render(): JSX.Element;
}
export {};

interface ISurveyResultsProps {
    survey: SurveyModel;
}
export declare class SurveyResults extends SurveyElementBase<ISurveyResultsProps, any> {
    model: SurveyResultsModel;
    constructor(props: ISurveyResultsProps);
    protected getStateElement(): Base;
    render(): JSX.Element;
    renderResultAsText(): JSX.Element;
    renderResultAsTable(): JSX.Element;
    renderRows(data: Array<any>): Array<JSX.Element>;
    renderRow(row: any): JSX.Element;
}
export {};

interface ITabDesignerComponentProps {
    data: TabDesignerViewModel<SurveyModel>;
}
export declare class TabDesignerComponent extends SurveyElementBase<ITabDesignerComponentProps, any> {
    protected get creator(): CreatorBase<SurveyModel>;
    protected getStateElements(): Array<Base>;
    protected renderPages(): JSX.Element[];
    renderElement(): JSX.Element;
}
export {};

interface ITabEmbedComponentProps {
    data: EmbedModel;
}
export declare class TabEmbedComponent extends SurveyElementBase<ITabEmbedComponentProps, any> {
    protected getStateElement(): Base;
    renderElement(): JSX.Element;
}
export {};

interface ITabJsonEditorAceComponentProps {
    data: AceJsonEditorModel;
}
export declare class TabJsonEditorAceComponent extends SurveyElementBase<ITabJsonEditorAceComponentProps, any> {
    constructor(props: ITabJsonEditorAceComponentProps);
    protected getStateElement(): Base;
    componentDidMount(): void;
    renderElement(): JSX.Element;
}
export {};

interface ITabJsonEditorTextareaComponentProps {
    data: TextareaJsonEditorModel;
}
export declare class TabJsonEditorTextareaComponent extends SurveyElementBase<ITabJsonEditorTextareaComponentProps, any> {
    constructor(props: any);
    protected getStateElement(): Base;
    renderElement(): JSX.Element;
}
export {};

export declare class TabLogicAddButtonComponent extends SurveyElementBase<any, any> {
    protected getStateElement(): Base;
    renderElement(): JSX.Element;
}
export declare class TabLogicComponent extends SurveyElementBase<any, any> {
    protected getStateElement(): Base;
    renderElement(): JSX.Element;
}

export declare class TabPreviewSurveyComponent extends SurveyElementBase<any, any> {
    protected getStateElement(): Base;
    renderElement(): JSX.Element;
    getBottomToolbar(): JSX.Element;
}

export declare class TabTranslationComponent extends SurveyElementBase<any, any> {
    protected getStateElement(): Base;
    renderElement(): JSX.Element;
    renderElementContent(): JSX.Element;
}

export declare class SurveySimulator extends SurveyElementBase<any, any> {
    constructor(props: any);
    protected getStateElement(): Base;
    renderElement(): JSX.Element;
}

export interface ISurveyCreatorToolboxItemProps {
    item: IQuestionToolboxItem;
    creator: CreatorBase<SurveyModel>;
    isCompact: boolean;
}
export declare class SurveyCreatorToolboxTool extends SurveyElementBase<ISurveyCreatorToolboxItemProps, any> {
    model: ToolboxToolViewModel;
    constructor(props: any);
    get item(): IQuestionToolboxItem;
    get creator(): CreatorBase<SurveyModel>;
    get isCompact(): boolean;
    protected getStateElement(): Base;
    render(): JSX.Element;
}
export declare class SurveyCreatorToolboxItem extends SurveyElementBase<ISurveyCreatorToolboxItemProps, any> {
    model: ToolboxToolViewModel;
    constructor(props: any);
    get item(): IQuestionToolboxItem;
    get creator(): CreatorBase<SurveyModel>;
    protected getStateElement(): Base;
    render(): JSX.Element;
}

export interface ISurveyCreatorToolboxProps {
    model: CreatorBase<SurveyModel>;
}
export declare class Toolbox extends SurveyElementBase<ISurveyCreatorToolboxProps, any> {
    constructor(props: ISurveyCreatorToolboxProps);
    get creator(): CreatorBase<SurveyModel>;
    get toolbox(): import("@survey/creator").QuestionToolbox;
    protected getStateElement(): Base;
    render(): JSX.Element;
    renderItems(items: Array<any>): JSX.Element[];
    renderCategories(): JSX.Element[];
    renderCategoryHeader(category: any): JSX.Element;
    protected renderCategoryContent(category: any): Array<any>;
}

export declare class AdaptiveToolbox extends Toolbox {
    constructor(props: ISurveyCreatorToolboxProps);
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
    renderItems(items: Array<any>, isCompact?: boolean): JSX.Element[];
    protected renderCategoryContent(category: any): Array<any>;
}

export interface ITabbedMenuComponentProps {
    model: TabbedMenuContainer;
}
export declare class TabbedMenuComponent extends SurveyElementBase<ITabbedMenuComponentProps, any> {
    protected getStateElement(): Base;
    constructor(props: any);
    renderElement(): JSX.Element;
    componentDidMount(): void;
    componentWillUnmount(): void;
}
export interface ITabbedMenuItemComponentProps {
    item: Action;
}
export declare class TabbedMenuItemComponent extends SurveyElementBase<ITabbedMenuItemComponentProps, any> {
    get item(): Action;
    protected getStateElement(): Base;
    constructor(props: any);
    render(): JSX.Element;
}
export default TabbedMenuComponent;

export interface NotifierComponentProps {
    creator: CreatorBase<SurveyModel>;
    notifier: Notifier;
}
export declare class NotifierComponent extends SurveyElementBase<NotifierComponentProps, any> {
    constructor(props: NotifierComponentProps);
    get notifier(): Notifier;
    protected getStateElement(): Base;
    renderElement(): JSX.Element;
}

export declare class SurveyNavigation extends SurveyElementBase<any, any> {
    componentDidMount(): void;
    componentDidUpdate(prevProps: any, prevState: any): void;
    componentWillUnmount(): void;
    protected get survey(): SurveyModel;
    protected get location(): string;
    protected get isTop(): boolean;
    protected canRender(): boolean;
    renderElement(): JSX.Element;
}

interface ISideBarComponentProps {
    model: SideBarModel;
}
export declare class SideBarComponent extends SurveyElementBase<ISideBarComponentProps, any> {
    get model(): SideBarModel;
    constructor(props: ISideBarComponentProps);
    protected getStateElement(): Base;
    componentDidMount(): void;
    componentWillUnmount(): void;
    canRender(): boolean;
    renderElement(): JSX.Element;
}
export default SideBarComponent;

export declare class ReactMouseEvent implements IPortableMouseEvent {
    event: React.MouseEvent<HTMLDivElement, MouseEvent>;
    constructor(event: React.MouseEvent<HTMLDivElement, MouseEvent>);
    stopPropagation(): void;
    preventDefault(): void;
    get cancelBubble(): boolean;
    set cancelBubble(value: boolean);
    get target(): EventTarget | null;
    get currentTarget(): EventTarget | null;
    get clientX(): number;
    get clientY(): number;
    get offsetX(): number;
    get offsetY(): number;
}
export declare class ReactDragEvent extends ReactMouseEvent implements IPortableDragEvent {
    event: React.DragEvent<HTMLDivElement>;
    constructor(event: React.DragEvent<HTMLDivElement>);
    get dataTransfer(): DataTransfer;
}

export {};

interface IPropertyGridComponentProps {
    model: PropertyGridViewModel<SurveyModel>;
}
export declare class PropertyGridComponent extends SurveyElementBase<IPropertyGridComponentProps, any> {
    get model(): PropertyGridViewModel<SurveyModel>;
    protected getStateElement(): Base;
    canRender(): boolean;
    renderElement(): JSX.Element;
}
export default PropertyGridComponent;

export declare class TranslationLineSkeleton extends React.Component<any, any> {
    render(): JSX.Element;
}

